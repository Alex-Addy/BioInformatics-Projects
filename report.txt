Your report should include the following sections:

1.     Description of PCR, you might want to include some nice pictures;

2.     The data structures and/or algorithms you used in your computer program, with justifications for your choices, you may want to include some diagrams;

3.     Discuss any implementation difficulties you encountered, and how you overcame them.

4.     Results.

5.     Discuss your results. How do the numbers you obtain from the simulation related to what you see on the gel which shows the PCR products.

Group members and their responsibilities:

Everyone: Write report parts relevant to responsibilities, Bug Fixing

Alex Addy - Assist in core simulation, Lead in general design and setup functions
Nicholas Thompson - Assist in core simulation, Lead in report writing
Cory Sutyak - Lead in core simulation


1.  PCR, or Polymerase Chain Reaction, is a process used to create a large number of copies of part of a DNA strand.  The number of copies can order into the thousands or even millions.  The process is used in areas such as DNA cloning for sequencing and study of hereditary diseases.  The process consists of three steps: denaturation, annealing, extension.  During denaturation the source DNA strand is heated up to split up the strand into it's complementary parts.  Next during annealing a primer is attached to the separated strands.  The primer is designed to bind to a location on the DNA strand around the area that is being copied.  This has to be an area where there is a sequence that is not repeated anywhere else in the DNA strand or else the primer may bind to the wrong location.  In the final step taq polymerase is used to generate complementary bases to the strand being copied.  This cycle is repeat over and over until the desired amount of copies are made.  The process creates new strands at an exponential rate however there is a chance that a taq polymerase may fall off prematurely creating a reject strand.  

2.  In order to determine whether or not a taq polymerase fell of during duplication we generated a random integer.  The upper limit for the number was calculated by size divided by failure chance so a strand with a length of 200 and a 0.05% failure rate would yield a top value of 4000.  The copy would fail if the generated integer was less than the size of the gene and would return the integer generated, otherwise if the copy succeeded the function would return 0.

3.	Our initial implementation was only for a single strand of DNA.  We didn't realize that we needed to simulate both strands.  A lot of our functions were initially made with that in mind.  Locating the index of the primers became difficult because of that as we did not want to increase the complexity of the program but we also did not want to throw away the code we already wrote.  Our solution was to reverse the second strand with the primer that runs in reverse so our functions would be able to work their algorithms on it and at the end we reverse it all again to bring it back to it's original state.

4.

5.
